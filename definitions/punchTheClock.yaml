swagger: '2.0'
info:
  x-ibm-name: punchtheclock
  version: 1.0.0
  title: punchTheClock
schemes:
  - https
host: $(catalog.host)
basePath: /api
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/identities/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for identities.
      operationId: User.prototype.__findById__identities
      parameters:
        - name: fk
          in: path
          description: Foreign key for identities
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for identities.
      operationId: User.prototype.__destroyById__identities
      parameters:
        - name: fk
          in: path
          description: Foreign key for identities
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for identities.
      operationId: User.prototype.__updateById__identities
      parameters:
        - name: fk
          in: path
          description: Foreign key for identities
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserIdentity'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
  '/Users/{id}/credentials/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for credentials.
      operationId: User.prototype.__findById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for credentials.
      operationId: User.prototype.__destroyById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for credentials.
      operationId: User.prototype.__updateById__credentials
      parameters:
        - name: fk
          in: path
          description: Foreign key for credentials
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserCredential'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Users/{id}/identities':
    get:
      tags:
        - User
      summary: Queries identities of User.
      operationId: User.prototype.__get__identities
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserIdentity'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in identities of this model.
      operationId: User.prototype.__create__identities
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserIdentity'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all identities of this model.
      operationId: User.prototype.__delete__identities
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/identities/count':
    get:
      tags:
        - User
      summary: Counts identities of User.
      operationId: User.prototype.__count__identities
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Users/{id}/credentials':
    get:
      tags:
        - User
      summary: Queries credentials of User.
      operationId: User.prototype.__get__credentials
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserCredential'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in credentials of this model.
      operationId: User.prototype.__create__credentials
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UserCredential'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all credentials of this model.
      operationId: User.prototype.__delete__credentials
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/credentials/count':
    get:
      tags:
        - User
      summary: Counts credentials of User.
      operationId: User.prototype.__count__credentials
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with email verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UserCredentials/{id}/user':
    get:
      tags:
        - UserCredential
      summary: Fetches belongsTo relation user.
      operationId: UserCredential.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /UserCredentials:
    post:
      tags:
        - UserCredential
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UserCredential.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    patch:
      tags:
        - UserCredential
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UserCredential.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    put:
      tags:
        - UserCredential
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserCredential.replaceOrCreate__put_UserCredentials
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    get:
      tags:
        - UserCredential
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UserCredential.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserCredential'
      deprecated: false
  /UserCredentials/replaceOrCreate:
    post:
      tags:
        - UserCredential
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserCredential.replaceOrCreate__post_UserCredentials_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  /UserCredentials/upsertWithWhere:
    post:
      tags:
        - UserCredential
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UserCredential.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  '/UserCredentials/{id}/exists':
    get:
      tags:
        - UserCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserCredential.exists__get_UserCredentials_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UserCredentials/{id}':
    head:
      tags:
        - UserCredential
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserCredential.exists__head_UserCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UserCredential
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UserCredential.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    put:
      tags:
        - UserCredential
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UserCredential.replaceById__put_UserCredentials_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
    delete:
      tags:
        - UserCredential
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UserCredential.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UserCredential
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: UserCredential.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserCredential'
        - name: id
          in: path
          description: UserCredential id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  '/UserCredentials/{id}/replace':
    post:
      tags:
        - UserCredential
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UserCredential.replaceById__post_UserCredentials_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  /UserCredentials/findOne:
    get:
      tags:
        - UserCredential
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UserCredential.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserCredential'
      deprecated: false
  /UserCredentials/update:
    post:
      tags:
        - UserCredential
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UserCredential.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserCredential'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UserCredentials/count:
    get:
      tags:
        - UserCredential
      summary: Count instances of the model matched by where from the data source.
      operationId: UserCredential.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UserIdentities/{id}/user':
    get:
      tags:
        - UserIdentity
      summary: Fetches belongsTo relation user.
      operationId: UserIdentity.prototype.__get__user
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: UserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /UserIdentities:
    post:
      tags:
        - UserIdentity
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UserIdentity.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    patch:
      tags:
        - UserIdentity
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UserIdentity.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    put:
      tags:
        - UserIdentity
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserIdentity.replaceOrCreate__put_UserIdentities
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    get:
      tags:
        - UserIdentity
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UserIdentity.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserIdentity'
      deprecated: false
  /UserIdentities/replaceOrCreate:
    post:
      tags:
        - UserIdentity
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UserIdentity.replaceOrCreate__post_UserIdentities_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
  /UserIdentities/upsertWithWhere:
    post:
      tags:
        - UserIdentity
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UserIdentity.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
  '/UserIdentities/{id}/exists':
    get:
      tags:
        - UserIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserIdentity.exists__get_UserIdentities_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UserIdentities/{id}':
    head:
      tags:
        - UserIdentity
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserIdentity.exists__head_UserIdentities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UserIdentity
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UserIdentity.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    put:
      tags:
        - UserIdentity
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UserIdentity.replaceById__put_UserIdentities_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
    delete:
      tags:
        - UserIdentity
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UserIdentity.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UserIdentity
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: UserIdentity.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserIdentity'
        - name: id
          in: path
          description: UserIdentity id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
  '/UserIdentities/{id}/replace':
    post:
      tags:
        - UserIdentity
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UserIdentity.replaceById__post_UserIdentities_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
  /UserIdentities/findOne:
    get:
      tags:
        - UserIdentity
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UserIdentity.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserIdentity'
      deprecated: false
  /UserIdentities/update:
    post:
      tags:
        - UserIdentity
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UserIdentity.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserIdentity'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UserIdentities/count:
    get:
      tags:
        - UserIdentity
      summary: Count instances of the model matched by where from the data source.
      operationId: UserIdentity.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/People/{id}/attendances/{fk}':
    get:
      tags:
        - Person
      summary: Find a related item by id for attendances.
      operationId: Person.prototype.__findById__attendances
      parameters:
        - name: fk
          in: path
          description: Foreign key for attendances
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Delete a related item by id for attendances.
      operationId: Person.prototype.__destroyById__attendances
      parameters:
        - name: fk
          in: path
          description: Foreign key for attendances
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Person
      summary: Update a related item by id for attendances.
      operationId: Person.prototype.__updateById__attendances
      parameters:
        - name: fk
          in: path
          description: Foreign key for attendances
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Attendance'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
  '/People/{id}/attendances':
    get:
      tags:
        - Person
      summary: Queries attendances of Person.
      operationId: Person.prototype.__get__attendances
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Attendance'
      deprecated: false
    post:
      tags:
        - Person
      summary: Creates a new instance in attendances of this model.
      operationId: Person.prototype.__create__attendances
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Attendance'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Deletes all attendances of this model.
      operationId: Person.prototype.__delete__attendances
      parameters:
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/People/{id}/attendances/count':
    get:
      tags:
        - Person
      summary: Counts attendances of Person.
      operationId: Person.prototype.__count__attendances
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /People:
    post:
      tags:
        - Person
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Person.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    patch:
      tags:
        - Person
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Person.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    put:
      tags:
        - Person
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Person.replaceOrCreate__put_People
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    get:
      tags:
        - Person
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Person.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Person'
      deprecated: false
  /People/replaceOrCreate:
    post:
      tags:
        - Person
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Person.replaceOrCreate__post_People_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /People/upsertWithWhere:
    post:
      tags:
        - Person
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Person.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  '/People/{id}/exists':
    get:
      tags:
        - Person
      summary: Check whether a model instance exists in the data source.
      operationId: 'Person.exists__get_People_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/People/{id}':
    head:
      tags:
        - Person
      summary: Check whether a model instance exists in the data source.
      operationId: 'Person.exists__head_People_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Person
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Person.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    put:
      tags:
        - Person
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Person.replaceById__put_People_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    delete:
      tags:
        - Person
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Person.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Person
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Person.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  '/People/{id}/replace':
    post:
      tags:
        - Person
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Person.replaceById__post_People_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /People/findOne:
    get:
      tags:
        - Person
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Person.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /People/update:
    post:
      tags:
        - Person
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Person.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /People/count:
    get:
      tags:
        - Person
      summary: Count instances of the model matched by where from the data source.
      operationId: Person.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /People/signIn:
    post:
      tags:
        - Person
      operationId: Person.signIn
      parameters:
        - name: personId
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  /People/signOut:
    post:
      tags:
        - Person
      operationId: Person.signOut
      parameters:
        - name: personId
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              status:
                type: string
      deprecated: false
  '/Attendances/{id}/person':
    get:
      tags:
        - Attendance
      summary: Fetches belongsTo relation person.
      operationId: Attendance.prototype.__get__person
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Attendance id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /Attendances:
    post:
      tags:
        - Attendance
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Attendance.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Attendance'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
    patch:
      tags:
        - Attendance
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Attendance.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Attendance'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
    put:
      tags:
        - Attendance
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Attendance.replaceOrCreate__put_Attendances
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Attendance'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
    get:
      tags:
        - Attendance
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Attendance.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Attendance'
      deprecated: false
  /Attendances/replaceOrCreate:
    post:
      tags:
        - Attendance
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Attendance.replaceOrCreate__post_Attendances_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Attendance'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
  /Attendances/upsertWithWhere:
    post:
      tags:
        - Attendance
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Attendance.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Attendance'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
  '/Attendances/{id}/exists':
    get:
      tags:
        - Attendance
      summary: Check whether a model instance exists in the data source.
      operationId: 'Attendance.exists__get_Attendances_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Attendances/{id}':
    head:
      tags:
        - Attendance
      summary: Check whether a model instance exists in the data source.
      operationId: 'Attendance.exists__head_Attendances_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Attendance
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Attendance.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
    put:
      tags:
        - Attendance
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Attendance.replaceById__put_Attendances_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Attendance'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
    delete:
      tags:
        - Attendance
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Attendance.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Attendance
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Attendance.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Attendance'
        - name: id
          in: path
          description: Attendance id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
  '/Attendances/{id}/replace':
    post:
      tags:
        - Attendance
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Attendance.replaceById__post_Attendances_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Attendance'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
  /Attendances/findOne:
    get:
      tags:
        - Attendance
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Attendance.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Attendance'
      deprecated: false
  /Attendances/update:
    post:
      tags:
        - Attendance
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Attendance.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Attendance'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Attendances/count:
    get:
      tags:
        - Attendance
      summary: Count instances of the model matched by where from the data source.
      operationId: Attendance.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  UserIdentity:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: number
        format: double
      userId:
        type: number
        format: double
    additionalProperties: false
  UserCredential:
    properties:
      provider:
        type: string
      authScheme:
        type: string
      externalId:
        type: string
      profile:
        type: object
      credentials:
        type: object
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      id:
        type: number
        format: double
      userId:
        type: number
        format: double
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Attendance:
    properties:
      startDate:
        type: string
        format: date-time
      endDate:
        type: string
        format: date-time
      id:
        type: number
        format: double
      personId:
        type: number
        format: double
    required:
      - startDate
    additionalProperties: false
  Person:
    properties:
      name:
        type: string
      birthDate:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - name
    additionalProperties: false
